/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type PositionDataStruct = {
  x: PromiseOrValue<BigNumberish>;
  y: PromiseOrValue<BigNumberish>;
  z: PromiseOrValue<BigNumberish>;
};

export type PositionDataStructOutput = [number, number, number] & {
  x: number;
  y: number;
  z: number;
};

export interface IWorldInterface extends utils.Interface {
  functions: {
    "attack(bytes32,bytes32)": FunctionFragment;
    "build(bytes32,bytes32,(int32,int32,int32))": FunctionFragment;
    "call(bytes16,bytes16,bytes)": FunctionFragment;
    "charge(bytes32,bytes32)": FunctionFragment;
    "copyMap(uint32)": FunctionFragment;
    "counterattack(bytes32,bytes32,int32)": FunctionFragment;
    "createMatch(bytes32)": FunctionFragment;
    "createPlayerEntity(address,uint32)": FunctionFragment;
    "deleteRecord(bytes32,bytes32[])": FunctionFragment;
    "deleteRecord(bytes16,bytes16,bytes32[])": FunctionFragment;
    "destroyMatch(uint32)": FunctionFragment;
    "emitEphemeralRecord(bytes16,bytes16,bytes32[],bytes)": FunctionFragment;
    "emitEphemeralRecord(bytes32,bytes32[],bytes)": FunctionFragment;
    "fight(bytes32,bytes32)": FunctionFragment;
    "finish(bytes32,bytes32)": FunctionFragment;
    "getField(bytes32,bytes32[],uint8)": FunctionFragment;
    "getFieldLength(bytes32,bytes32[],uint8,bytes32)": FunctionFragment;
    "getFieldSlice(bytes32,bytes32[],uint8,bytes32,uint256,uint256)": FunctionFragment;
    "getKeySchema(bytes32)": FunctionFragment;
    "getRecord(bytes32,bytes32[],bytes32)": FunctionFragment;
    "getRecord(bytes32,bytes32[])": FunctionFragment;
    "getSchema(bytes32)": FunctionFragment;
    "grantAccess(bytes16,bytes16,address)": FunctionFragment;
    "installModule(address,bytes)": FunctionFragment;
    "installRootModule(address,bytes)": FunctionFragment;
    "move(bytes32,(int32,int32,int32)[])": FunctionFragment;
    "moveAndAttack(bytes32,(int32,int32,int32)[],bytes32)": FunctionFragment;
    "nameIsValid(string,uint32)": FunctionFragment;
    "popFromField(bytes16,bytes16,bytes32[],uint8,uint256)": FunctionFragment;
    "popFromField(bytes32,bytes32[],uint8,uint256)": FunctionFragment;
    "pushToField(bytes32,bytes32[],uint8,bytes)": FunctionFragment;
    "pushToField(bytes16,bytes16,bytes32[],uint8,bytes)": FunctionFragment;
    "register(bytes32,uint32,string)": FunctionFragment;
    "register(bytes32,uint32,string,bytes32)": FunctionFragment;
    "registerFunctionSelector(bytes16,bytes16,string,string)": FunctionFragment;
    "registerHook(bytes16,bytes16,address)": FunctionFragment;
    "registerNamespace(bytes16)": FunctionFragment;
    "registerRootFunctionSelector(bytes16,bytes16,bytes4,bytes4)": FunctionFragment;
    "registerSchema(bytes32,bytes32,bytes32)": FunctionFragment;
    "registerStoreHook(bytes32,address)": FunctionFragment;
    "registerSystem(bytes16,bytes16,address,bool)": FunctionFragment;
    "registerSystemHook(bytes16,bytes16,address)": FunctionFragment;
    "registerTable(bytes16,bytes16,bytes32,bytes32)": FunctionFragment;
    "registerTableHook(bytes16,bytes16,address)": FunctionFragment;
    "revokeAccess(bytes16,bytes16,address)": FunctionFragment;
    "setField(bytes32,bytes32[],uint8,bytes)": FunctionFragment;
    "setField(bytes16,bytes16,bytes32[],uint8,bytes)": FunctionFragment;
    "setMetadata(bytes16,bytes16,string,string[])": FunctionFragment;
    "setMetadata(bytes32,string,string[])": FunctionFragment;
    "setRecord(bytes16,bytes16,bytes32[],bytes)": FunctionFragment;
    "setRecord(bytes32,bytes32[],bytes)": FunctionFragment;
    "spawnLevelDev(bytes32,uint256,uint256)": FunctionFragment;
    "spawnPlayer(bytes32,bytes32)": FunctionFragment;
    "spawnPrototypeDev(bytes32,bytes32,(int32,int32,int32))": FunctionFragment;
    "toggleReady(uint32)": FunctionFragment;
    "updateInField(bytes32,bytes32[],uint8,uint256,bytes)": FunctionFragment;
    "updateInField(bytes16,bytes16,bytes32[],uint8,uint256,bytes)": FunctionFragment;
    "uploadMap(bytes32,bytes32[],(int32,int32,int32)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "attack"
      | "build"
      | "call"
      | "charge"
      | "copyMap"
      | "counterattack"
      | "createMatch"
      | "createPlayerEntity"
      | "deleteRecord(bytes32,bytes32[])"
      | "deleteRecord(bytes16,bytes16,bytes32[])"
      | "destroyMatch"
      | "emitEphemeralRecord(bytes16,bytes16,bytes32[],bytes)"
      | "emitEphemeralRecord(bytes32,bytes32[],bytes)"
      | "fight"
      | "finish"
      | "getField"
      | "getFieldLength"
      | "getFieldSlice"
      | "getKeySchema"
      | "getRecord(bytes32,bytes32[],bytes32)"
      | "getRecord(bytes32,bytes32[])"
      | "getSchema"
      | "grantAccess"
      | "installModule"
      | "installRootModule"
      | "move"
      | "moveAndAttack"
      | "nameIsValid"
      | "popFromField(bytes16,bytes16,bytes32[],uint8,uint256)"
      | "popFromField(bytes32,bytes32[],uint8,uint256)"
      | "pushToField(bytes32,bytes32[],uint8,bytes)"
      | "pushToField(bytes16,bytes16,bytes32[],uint8,bytes)"
      | "register(bytes32,uint32,string)"
      | "register(bytes32,uint32,string,bytes32)"
      | "registerFunctionSelector"
      | "registerHook"
      | "registerNamespace"
      | "registerRootFunctionSelector"
      | "registerSchema"
      | "registerStoreHook"
      | "registerSystem"
      | "registerSystemHook"
      | "registerTable"
      | "registerTableHook"
      | "revokeAccess"
      | "setField(bytes32,bytes32[],uint8,bytes)"
      | "setField(bytes16,bytes16,bytes32[],uint8,bytes)"
      | "setMetadata(bytes16,bytes16,string,string[])"
      | "setMetadata(bytes32,string,string[])"
      | "setRecord(bytes16,bytes16,bytes32[],bytes)"
      | "setRecord(bytes32,bytes32[],bytes)"
      | "spawnLevelDev"
      | "spawnPlayer"
      | "spawnPrototypeDev"
      | "toggleReady"
      | "updateInField(bytes32,bytes32[],uint8,uint256,bytes)"
      | "updateInField(bytes16,bytes16,bytes32[],uint8,uint256,bytes)"
      | "uploadMap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "attack",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "build",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PositionDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "charge",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "copyMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "counterattack",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMatch",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPlayerEntity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRecord(bytes32,bytes32[])",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRecord(bytes16,bytes16,bytes32[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "destroyMatch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitEphemeralRecord(bytes16,bytes16,bytes32[],bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitEphemeralRecord(bytes32,bytes32[],bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fight",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "finish",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldLength",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldSlice",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeySchema",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord(bytes32,bytes32[],bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord(bytes32,bytes32[])",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchema",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "installModule",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "installRootModule",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [PromiseOrValue<BytesLike>, PositionDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "moveAndAttack",
    values: [
      PromiseOrValue<BytesLike>,
      PositionDataStruct[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nameIsValid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "popFromField(bytes16,bytes16,bytes32[],uint8,uint256)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "popFromField(bytes32,bytes32[],uint8,uint256)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pushToField(bytes32,bytes32[],uint8,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pushToField(bytes16,bytes16,bytes32[],uint8,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "register(bytes32,uint32,string)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "register(bytes32,uint32,string,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFunctionSelector",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerHook",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNamespace",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRootFunctionSelector",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSchema",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStoreHook",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSystem",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSystemHook",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTable",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTableHook",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setField(bytes32,bytes32[],uint8,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setField(bytes16,bytes16,bytes32[],uint8,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata(bytes16,bytes16,string,string[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadata(bytes32,string,string[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord(bytes16,bytes16,bytes32[],bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord(bytes32,bytes32[],bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "spawnLevelDev",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "spawnPlayer",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "spawnPrototypeDev",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PositionDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleReady",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInField(bytes32,bytes32[],uint8,uint256,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInField(bytes16,bytes16,bytes32[],uint8,uint256,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadMap",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PositionDataStruct[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "build", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "charge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "copyMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "counterattack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPlayerEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRecord(bytes32,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRecord(bytes16,bytes16,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitEphemeralRecord(bytes16,bytes16,bytes32[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitEphemeralRecord(bytes32,bytes32[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finish", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getField", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFieldLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFieldSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeySchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecord(bytes32,bytes32[],bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecord(bytes32,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSchema", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installRootModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveAndAttack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameIsValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "popFromField(bytes16,bytes16,bytes32[],uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "popFromField(bytes32,bytes32[],uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushToField(bytes32,bytes32[],uint8,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushToField(bytes16,bytes16,bytes32[],uint8,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "register(bytes32,uint32,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "register(bytes32,uint32,string,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFunctionSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRootFunctionSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStoreHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSystemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTableHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setField(bytes32,bytes32[],uint8,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setField(bytes16,bytes16,bytes32[],uint8,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata(bytes16,bytes16,string,string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata(bytes32,string,string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecord(bytes16,bytes16,bytes32[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecord(bytes32,bytes32[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spawnLevelDev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spawnPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spawnPrototypeDev",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInField(bytes32,bytes32[],uint8,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInField(bytes16,bytes16,bytes32[],uint8,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uploadMap", data: BytesLike): Result;

  events: {
    "HelloWorld()": EventFragment;
    "StoreDeleteRecord(bytes32,bytes32[])": EventFragment;
    "StoreEphemeralRecord(bytes32,bytes32[],bytes)": EventFragment;
    "StoreSetField(bytes32,bytes32[],uint8,bytes)": EventFragment;
    "StoreSetRecord(bytes32,bytes32[],bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HelloWorld"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreDeleteRecord"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreEphemeralRecord"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreSetField"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreSetRecord"): EventFragment;
}

export interface HelloWorldEventObject {}
export type HelloWorldEvent = TypedEvent<[], HelloWorldEventObject>;

export type HelloWorldEventFilter = TypedEventFilter<HelloWorldEvent>;

export interface StoreDeleteRecordEventObject {
  table: string;
  key: string[];
}
export type StoreDeleteRecordEvent = TypedEvent<
  [string, string[]],
  StoreDeleteRecordEventObject
>;

export type StoreDeleteRecordEventFilter =
  TypedEventFilter<StoreDeleteRecordEvent>;

export interface StoreEphemeralRecordEventObject {
  table: string;
  key: string[];
  data: string;
}
export type StoreEphemeralRecordEvent = TypedEvent<
  [string, string[], string],
  StoreEphemeralRecordEventObject
>;

export type StoreEphemeralRecordEventFilter =
  TypedEventFilter<StoreEphemeralRecordEvent>;

export interface StoreSetFieldEventObject {
  table: string;
  key: string[];
  schemaIndex: number;
  data: string;
}
export type StoreSetFieldEvent = TypedEvent<
  [string, string[], number, string],
  StoreSetFieldEventObject
>;

export type StoreSetFieldEventFilter = TypedEventFilter<StoreSetFieldEvent>;

export interface StoreSetRecordEventObject {
  table: string;
  key: string[];
  data: string;
}
export type StoreSetRecordEvent = TypedEvent<
  [string, string[], string],
  StoreSetRecordEventObject
>;

export type StoreSetRecordEventFilter = TypedEventFilter<StoreSetRecordEvent>;

export interface IWorld extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWorldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attack(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    build(
      factoryEntity: PromiseOrValue<BytesLike>,
      prototypeId: PromiseOrValue<BytesLike>,
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    call(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      funcSelectorAndArgs: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    charge(
      charger: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    copyMap(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    counterattack(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      defenderDamage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMatch(
      levelId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPlayerEntity(
      playerAddress: PromiseOrValue<string>,
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deleteRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deleteRecord(bytes16,bytes16,bytes32[])"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    destroyMatch(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "emitEphemeralRecord(bytes16,bytes16,bytes32[],bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "emitEphemeralRecord(bytes32,bytes32[],bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fight(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finish(
      matchEntity: PromiseOrValue<BytesLike>,
      attacker: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getFieldLength(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFieldSlice(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { schema: string }>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    "getRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { schema: string }>;

    grantAccess(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    move(
      entity: PromiseOrValue<BytesLike>,
      path: PositionDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moveAndAttack(
      entity: PromiseOrValue<BytesLike>,
      path: PositionDataStruct[],
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nameIsValid(
      name: PromiseOrValue<string>,
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "popFromField(bytes16,bytes16,bytes32[],uint8,uint256)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "popFromField(bytes32,bytes32[],uint8,uint256)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "pushToField(bytes32,bytes32[],uint8,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "pushToField(bytes16,bytes16,bytes32[],uint8,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "register(bytes32,uint32,string)"(
      spawnPoint: PromiseOrValue<BytesLike>,
      matchId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "register(bytes32,uint32,string,bytes32)"(
      spawnPoint: PromiseOrValue<BytesLike>,
      matchId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      recipient: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerRootFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSchema(
      table: PromiseOrValue<BytesLike>,
      schema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerStoreHook(
      table: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSystem(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSystemHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerTable(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerTableHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAccess(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setField(bytes32,bytes32[],uint8,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setField(bytes16,bytes16,bytes32[],uint8,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMetadata(bytes16,bytes16,string,string[])"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMetadata(bytes32,string,string[])"(
      table: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRecord(bytes16,bytes16,bytes32[],bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setRecord(bytes32,bytes32[],bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spawnLevelDev(
      levelId: PromiseOrValue<BytesLike>,
      limit: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spawnPlayer(
      player: PromiseOrValue<BytesLike>,
      spawnPoint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spawnPrototypeDev(
      prototypeId: PromiseOrValue<BytesLike>,
      ownerId: PromiseOrValue<BytesLike>,
      position: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleReady(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateInField(bytes32,bytes32[],uint8,uint256,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateInField(bytes16,bytes16,bytes32[],uint8,uint256,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uploadMap(
      levelId: PromiseOrValue<BytesLike>,
      templateIds: PromiseOrValue<BytesLike>[],
      positions: PositionDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  attack(
    attacker: PromiseOrValue<BytesLike>,
    defender: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  build(
    factoryEntity: PromiseOrValue<BytesLike>,
    prototypeId: PromiseOrValue<BytesLike>,
    coord: PositionDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  call(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    funcSelectorAndArgs: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  charge(
    charger: PromiseOrValue<BytesLike>,
    target: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  copyMap(
    matchId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  counterattack(
    attacker: PromiseOrValue<BytesLike>,
    defender: PromiseOrValue<BytesLike>,
    defenderDamage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMatch(
    levelId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPlayerEntity(
    playerAddress: PromiseOrValue<string>,
    matchId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deleteRecord(bytes32,bytes32[])"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deleteRecord(bytes16,bytes16,bytes32[])"(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  destroyMatch(
    matchId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "emitEphemeralRecord(bytes16,bytes16,bytes32[],bytes)"(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "emitEphemeralRecord(bytes32,bytes32[],bytes)"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fight(
    attacker: PromiseOrValue<BytesLike>,
    defender: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finish(
    matchEntity: PromiseOrValue<BytesLike>,
    attacker: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getField(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFieldLength(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    schema: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFieldSlice(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    schema: PromiseOrValue<BytesLike>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getKeySchema(
    table: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRecord(bytes32,bytes32[],bytes32)"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schema: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRecord(bytes32,bytes32[])"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string>;

  getSchema(
    table: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantAccess(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    grantee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installModule(
    module: PromiseOrValue<string>,
    args: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installRootModule(
    module: PromiseOrValue<string>,
    args: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  move(
    entity: PromiseOrValue<BytesLike>,
    path: PositionDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moveAndAttack(
    entity: PromiseOrValue<BytesLike>,
    path: PositionDataStruct[],
    target: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nameIsValid(
    name: PromiseOrValue<string>,
    matchId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "popFromField(bytes16,bytes16,bytes32[],uint8,uint256)"(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    byteLengthToPop: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "popFromField(bytes32,bytes32[],uint8,uint256)"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    byteLengthToPop: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "pushToField(bytes32,bytes32[],uint8,bytes)"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    dataToPush: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "pushToField(bytes16,bytes16,bytes32[],uint8,bytes)"(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    dataToPush: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "register(bytes32,uint32,string)"(
    spawnPoint: PromiseOrValue<BytesLike>,
    matchId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "register(bytes32,uint32,string,bytes32)"(
    spawnPoint: PromiseOrValue<BytesLike>,
    matchId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    recipient: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerFunctionSelector(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    systemFunctionName: PromiseOrValue<string>,
    systemFunctionArguments: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerHook(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    hook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNamespace(
    namespace: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerRootFunctionSelector(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    worldFunctionSelector: PromiseOrValue<BytesLike>,
    systemFunctionSelector: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSchema(
    table: PromiseOrValue<BytesLike>,
    schema: PromiseOrValue<BytesLike>,
    keySchema: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerStoreHook(
    table: PromiseOrValue<BytesLike>,
    hook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSystem(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    system: PromiseOrValue<string>,
    publicAccess: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSystemHook(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    hook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerTable(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    valueSchema: PromiseOrValue<BytesLike>,
    keySchema: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerTableHook(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    hook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAccess(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    grantee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setField(bytes32,bytes32[],uint8,bytes)"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setField(bytes16,bytes16,bytes32[],uint8,bytes)"(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMetadata(bytes16,bytes16,string,string[])"(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    tableName: PromiseOrValue<string>,
    fieldNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMetadata(bytes32,string,string[])"(
    table: PromiseOrValue<BytesLike>,
    tableName: PromiseOrValue<string>,
    fieldNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRecord(bytes16,bytes16,bytes32[],bytes)"(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setRecord(bytes32,bytes32[],bytes)"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spawnLevelDev(
    levelId: PromiseOrValue<BytesLike>,
    limit: PromiseOrValue<BigNumberish>,
    offset: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spawnPlayer(
    player: PromiseOrValue<BytesLike>,
    spawnPoint: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spawnPrototypeDev(
    prototypeId: PromiseOrValue<BytesLike>,
    ownerId: PromiseOrValue<BytesLike>,
    position: PositionDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleReady(
    matchId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateInField(bytes32,bytes32[],uint8,uint256,bytes)"(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    startByteIndex: PromiseOrValue<BigNumberish>,
    dataToSet: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateInField(bytes16,bytes16,bytes32[],uint8,uint256,bytes)"(
    namespace: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    startByteIndex: PromiseOrValue<BigNumberish>,
    dataToSet: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uploadMap(
    levelId: PromiseOrValue<BytesLike>,
    templateIds: PromiseOrValue<BytesLike>[],
    positions: PositionDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    attack(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    build(
      factoryEntity: PromiseOrValue<BytesLike>,
      prototypeId: PromiseOrValue<BytesLike>,
      coord: PositionDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    call(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      funcSelectorAndArgs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    charge(
      charger: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    copyMap(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    counterattack(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      defenderDamage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createMatch(
      levelId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    createPlayerEntity(
      playerAddress: PromiseOrValue<string>,
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "deleteRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "deleteRecord(bytes16,bytes16,bytes32[])"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    destroyMatch(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitEphemeralRecord(bytes16,bytes16,bytes32[],bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitEphemeralRecord(bytes32,bytes32[],bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    fight(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    finish(
      matchEntity: PromiseOrValue<BytesLike>,
      attacker: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFieldLength(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldSlice(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    getSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantAccess(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    move(
      entity: PromiseOrValue<BytesLike>,
      path: PositionDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    moveAndAttack(
      entity: PromiseOrValue<BytesLike>,
      path: PositionDataStruct[],
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    nameIsValid(
      name: PromiseOrValue<string>,
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "popFromField(bytes16,bytes16,bytes32[],uint8,uint256)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "popFromField(bytes32,bytes32[],uint8,uint256)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "pushToField(bytes32,bytes32[],uint8,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "pushToField(bytes16,bytes16,bytes32[],uint8,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "register(bytes32,uint32,string)"(
      spawnPoint: PromiseOrValue<BytesLike>,
      matchId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "register(bytes32,uint32,string,bytes32)"(
      spawnPoint: PromiseOrValue<BytesLike>,
      matchId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      recipient: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRootFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerSchema(
      table: PromiseOrValue<BytesLike>,
      schema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerStoreHook(
      table: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSystem(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerSystemHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerTable(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerTableHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAccess(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setField(bytes32,bytes32[],uint8,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setField(bytes16,bytes16,bytes32[],uint8,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMetadata(bytes16,bytes16,string,string[])"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setMetadata(bytes32,string,string[])"(
      table: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setRecord(bytes16,bytes16,bytes32[],bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRecord(bytes32,bytes32[],bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    spawnLevelDev(
      levelId: PromiseOrValue<BytesLike>,
      limit: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    spawnPlayer(
      player: PromiseOrValue<BytesLike>,
      spawnPoint: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    spawnPrototypeDev(
      prototypeId: PromiseOrValue<BytesLike>,
      ownerId: PromiseOrValue<BytesLike>,
      position: PositionDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleReady(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateInField(bytes32,bytes32[],uint8,uint256,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateInField(bytes16,bytes16,bytes32[],uint8,uint256,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    uploadMap(
      levelId: PromiseOrValue<BytesLike>,
      templateIds: PromiseOrValue<BytesLike>[],
      positions: PositionDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HelloWorld()"(): HelloWorldEventFilter;
    HelloWorld(): HelloWorldEventFilter;

    "StoreDeleteRecord(bytes32,bytes32[])"(
      table?: null,
      key?: null
    ): StoreDeleteRecordEventFilter;
    StoreDeleteRecord(table?: null, key?: null): StoreDeleteRecordEventFilter;

    "StoreEphemeralRecord(bytes32,bytes32[],bytes)"(
      table?: null,
      key?: null,
      data?: null
    ): StoreEphemeralRecordEventFilter;
    StoreEphemeralRecord(
      table?: null,
      key?: null,
      data?: null
    ): StoreEphemeralRecordEventFilter;

    "StoreSetField(bytes32,bytes32[],uint8,bytes)"(
      table?: null,
      key?: null,
      schemaIndex?: null,
      data?: null
    ): StoreSetFieldEventFilter;
    StoreSetField(
      table?: null,
      key?: null,
      schemaIndex?: null,
      data?: null
    ): StoreSetFieldEventFilter;

    "StoreSetRecord(bytes32,bytes32[],bytes)"(
      table?: null,
      key?: null,
      data?: null
    ): StoreSetRecordEventFilter;
    StoreSetRecord(
      table?: null,
      key?: null,
      data?: null
    ): StoreSetRecordEventFilter;
  };

  estimateGas: {
    attack(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    build(
      factoryEntity: PromiseOrValue<BytesLike>,
      prototypeId: PromiseOrValue<BytesLike>,
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    call(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      funcSelectorAndArgs: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    charge(
      charger: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    copyMap(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    counterattack(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      defenderDamage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMatch(
      levelId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPlayerEntity(
      playerAddress: PromiseOrValue<string>,
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deleteRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deleteRecord(bytes16,bytes16,bytes32[])"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    destroyMatch(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "emitEphemeralRecord(bytes16,bytes16,bytes32[],bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "emitEphemeralRecord(bytes32,bytes32[],bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fight(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finish(
      matchEntity: PromiseOrValue<BytesLike>,
      attacker: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldLength(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldSlice(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAccess(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    move(
      entity: PromiseOrValue<BytesLike>,
      path: PositionDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moveAndAttack(
      entity: PromiseOrValue<BytesLike>,
      path: PositionDataStruct[],
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nameIsValid(
      name: PromiseOrValue<string>,
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "popFromField(bytes16,bytes16,bytes32[],uint8,uint256)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "popFromField(bytes32,bytes32[],uint8,uint256)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "pushToField(bytes32,bytes32[],uint8,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "pushToField(bytes16,bytes16,bytes32[],uint8,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "register(bytes32,uint32,string)"(
      spawnPoint: PromiseOrValue<BytesLike>,
      matchId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "register(bytes32,uint32,string,bytes32)"(
      spawnPoint: PromiseOrValue<BytesLike>,
      matchId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      recipient: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerRootFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSchema(
      table: PromiseOrValue<BytesLike>,
      schema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerStoreHook(
      table: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSystem(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSystemHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerTable(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerTableHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAccess(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setField(bytes32,bytes32[],uint8,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setField(bytes16,bytes16,bytes32[],uint8,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMetadata(bytes16,bytes16,string,string[])"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMetadata(bytes32,string,string[])"(
      table: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRecord(bytes16,bytes16,bytes32[],bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setRecord(bytes32,bytes32[],bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spawnLevelDev(
      levelId: PromiseOrValue<BytesLike>,
      limit: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spawnPlayer(
      player: PromiseOrValue<BytesLike>,
      spawnPoint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spawnPrototypeDev(
      prototypeId: PromiseOrValue<BytesLike>,
      ownerId: PromiseOrValue<BytesLike>,
      position: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleReady(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateInField(bytes32,bytes32[],uint8,uint256,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateInField(bytes16,bytes16,bytes32[],uint8,uint256,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uploadMap(
      levelId: PromiseOrValue<BytesLike>,
      templateIds: PromiseOrValue<BytesLike>[],
      positions: PositionDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attack(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    build(
      factoryEntity: PromiseOrValue<BytesLike>,
      prototypeId: PromiseOrValue<BytesLike>,
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    call(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      funcSelectorAndArgs: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    charge(
      charger: PromiseOrValue<BytesLike>,
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    copyMap(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    counterattack(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      defenderDamage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMatch(
      levelId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPlayerEntity(
      playerAddress: PromiseOrValue<string>,
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deleteRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deleteRecord(bytes16,bytes16,bytes32[])"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    destroyMatch(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "emitEphemeralRecord(bytes16,bytes16,bytes32[],bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "emitEphemeralRecord(bytes32,bytes32[],bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fight(
      attacker: PromiseOrValue<BytesLike>,
      defender: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finish(
      matchEntity: PromiseOrValue<BytesLike>,
      attacker: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFieldLength(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFieldSlice(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      schema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRecord(bytes32,bytes32[])"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAccess(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    move(
      entity: PromiseOrValue<BytesLike>,
      path: PositionDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moveAndAttack(
      entity: PromiseOrValue<BytesLike>,
      path: PositionDataStruct[],
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nameIsValid(
      name: PromiseOrValue<string>,
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "popFromField(bytes16,bytes16,bytes32[],uint8,uint256)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "popFromField(bytes32,bytes32[],uint8,uint256)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "pushToField(bytes32,bytes32[],uint8,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "pushToField(bytes16,bytes16,bytes32[],uint8,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "register(bytes32,uint32,string)"(
      spawnPoint: PromiseOrValue<BytesLike>,
      matchId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "register(bytes32,uint32,string,bytes32)"(
      spawnPoint: PromiseOrValue<BytesLike>,
      matchId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      recipient: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerRootFunctionSelector(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSchema(
      table: PromiseOrValue<BytesLike>,
      schema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerStoreHook(
      table: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSystem(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSystemHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerTable(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerTableHook(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAccess(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setField(bytes32,bytes32[],uint8,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setField(bytes16,bytes16,bytes32[],uint8,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMetadata(bytes16,bytes16,string,string[])"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMetadata(bytes32,string,string[])"(
      table: PromiseOrValue<BytesLike>,
      tableName: PromiseOrValue<string>,
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRecord(bytes16,bytes16,bytes32[],bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setRecord(bytes32,bytes32[],bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spawnLevelDev(
      levelId: PromiseOrValue<BytesLike>,
      limit: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spawnPlayer(
      player: PromiseOrValue<BytesLike>,
      spawnPoint: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spawnPrototypeDev(
      prototypeId: PromiseOrValue<BytesLike>,
      ownerId: PromiseOrValue<BytesLike>,
      position: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleReady(
      matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateInField(bytes32,bytes32[],uint8,uint256,bytes)"(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateInField(bytes16,bytes16,bytes32[],uint8,uint256,bytes)"(
      namespace: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uploadMap(
      levelId: PromiseOrValue<BytesLike>,
      templateIds: PromiseOrValue<BytesLike>[],
      positions: PositionDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
